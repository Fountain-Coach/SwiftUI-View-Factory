from app.models.layout import LayoutNode
from app.services.codegen import generate_swift


def test_generate_basic_vstack():
    layout = LayoutNode(type="VStack", children=[LayoutNode(type="Text", text="Hello")])
    swift = generate_swift(layout)
    lines = swift.splitlines()
    assert lines[0].startswith("// Generated by SwiftUI View Factory")
    assert lines[1] == "import SwiftUI"
    assert "struct GeneratedView" in swift
    assert 'Text("Hello")' in swift


def test_generate_conditional():
    layout = LayoutNode(
        type="Conditional",
        condition="flag",
        then=LayoutNode(type="Text", text="Yes"),
        **{"else": LayoutNode(type="Text", text="No")}
    )
    swift = generate_swift(layout)
    assert "if flag {" in swift
    assert 'Text("Yes")' in swift
    assert "} else {" in swift
    assert 'Text("No")' in swift


def test_generate_navigation_list_section():
    layout = LayoutNode(
        type="NavigationStack",
        children=[
            LayoutNode(
                type="List",
                children=[
                    LayoutNode(
                        type="Section",
                        text="Header",
                        children=[LayoutNode(type="Text", text="Row1")],
                    )
                ],
            )
        ],
    )

    swift = generate_swift(layout)
    assert "NavigationStack {" in swift
    assert "List {" in swift
    assert 'Section(header: Text("Header"))' in swift
    assert 'Text("Row1")' in swift


def test_generate_with_style_options():
    layout = LayoutNode(
        type="VStack",
        children=[LayoutNode(type="Text", text="Hello")],
    )
    style = {"font": "title", "color": "red", "spacing": 10}
    swift = generate_swift(layout, style)
    assert "VStack(spacing: 10)" in swift
    assert ".font(.title)" in swift
    assert ".foregroundColor(.red)" in swift


def test_generate_with_backend_hooks():
    layout = LayoutNode(type="Text", text="Ping")
    swift = generate_swift(layout, backend_hooks=True)
    assert ".onAppear {" in swift
    assert 'print("Analytics event")' in swift


def test_generate_without_backend_hooks():
    layout = LayoutNode(type="Text", text="Ping")
    swift = generate_swift(layout)
    assert ".onAppear {" not in swift


def test_generate_scrollview():
    layout = LayoutNode(
        type="ScrollView",
        children=[LayoutNode(type="Text", text="Item 1"), LayoutNode(type="Text", text="Item 2")],
    )
    swift = generate_swift(layout)
    assert "ScrollView {" in swift
    assert 'Text("Item 1")' in swift
    assert 'Text("Item 2")' in swift


def test_generate_zstack():
    layout = LayoutNode(
        type="ZStack",
        children=[LayoutNode(type="Image", text="bg"), LayoutNode(type="Text", text="Overlay")],
    )
    swift = generate_swift(layout)
    assert "ZStack {" in swift
    assert 'Image("bg")' in swift
    assert 'Text("Overlay")' in swift


def test_generate_form_with_textfields():
    layout = LayoutNode(
        type="Form",
        children=[
            LayoutNode(type="TextField", text="Name", id="name"),
            LayoutNode(type="TextField", text="Email", id="email"),
        ],
    )
    swift = generate_swift(layout)
    assert "Form {" in swift
    assert 'TextField("Name", text: $name)' in swift
    assert 'TextField("Email", text: $email)' in swift


def test_generate_with_indent_and_header_off():
    layout = LayoutNode(type="VStack", children=[LayoutNode(type="Text", text="Hi")])
    style = {"indent": 4, "header_comment": False}
    swift = generate_swift(layout, style)
    lines = swift.splitlines()
    assert lines[0] == "import SwiftUI"
    assert lines[1].startswith("struct GeneratedView")
    assert lines[2].startswith("    var body")


def test_generate_with_extra_style_modifiers():
    layout = LayoutNode(type="Text", text="Styled")
    style = {
        "bold": True,
        "italic": True,
        "padding": 4,
        "background_color": "blue",
        "corner_radius": 5,
    }
    swift = generate_swift(layout, style)
    assert ".bold()" in swift
    assert ".italic()" in swift
    assert ".padding(4)" in swift
    assert ".background(Color.blue)" in swift
    assert ".cornerRadius(5)" in swift
